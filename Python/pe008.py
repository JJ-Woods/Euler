#Author - Jamie Woods
#https://projecteuler.net/problem=8


SEARCH  = "73167176531330624919225119674426574742355349194934"
SEARCH += "96983520312774506326239578318016984801869478851843"
SEARCH += "85861560789112949495459501737958331952853208805511"
SEARCH += "12540698747158523863050715693290963295227443043557"
SEARCH += "66896648950445244523161731856403098711121722383113"
SEARCH += "62229893423380308135336276614282806444486645238749"
SEARCH += "30358907296290491560440772390713810515859307960866"
SEARCH += "70172427121883998797908792274921901699720888093776"
SEARCH += "65727333001053367881220235421809751254540594752243"
SEARCH += "52584907711670556013604839586446706324415722155397"
SEARCH += "53697817977846174064955149290862569321978468622482"
SEARCH += "83972241375657056057490261407972968652414535100474"
SEARCH += "82166370484403199890008895243450658541227588666881"
SEARCH += "16427171479924442928230863465674813919123162824586"
SEARCH += "17866458359124566529476545682848912883142607690042"
SEARCH += "24219022671055626321111109370544217506941658960408"
SEARCH += "07198403850962455444362981230987879927244284909188"
SEARCH += "84580156166097919133875499200524063689912560717606"
SEARCH += "05886116467109405077541002256983155200055935729725"
SEARCH += "71636269561882670428252483600823257530420752963450"

ADJACENT_DIGITS = 13


def main():
    currentBiggest = 0
    lastN = []
    for x in range(0, len(SEARCH)):
        currentNum = SEARCH[x:x + 1]
        lastN.append(currentNum)
        if len(lastN) == ADJACENT_DIGITS:
            productOfLastN = productOfList(lastN)
            if productOfLastN > currentBiggest:
                currentBiggest = productOfLastN
            lastN.pop(0)
    print("The solution to problem 8 is " + str(currentBiggest))


def productOfList(list):
    product = 0
    firstNum = True
    for num in list:
        num = int(num)
        if firstNum:
            product += num
            firstNum = False
        else:
            product *= num
    return product


def productListCases():
    testProductOfList([3, 3, 3], 27)
    testProductOfList([3, 3, 4, 5], 180)
    testProductOfList([3, 3], 9)
    testProductOfList([3, 3, 5, 10], 450)
    testProductOfList([9, 3, 0, 10], 0)


def testProductOfList(list, expected):
    if productOfList(list) == expected:
        print("Success")
    else:
        print("Fail")


if __name__ == "__main__":
    main()
